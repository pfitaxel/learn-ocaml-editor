begin library "learnocaml-sync"
  files = [
    "learnocaml_sync.ml"
  ]
  requires = [
    "learnocaml-toplevel-history"
    "learnocaml-state"
  ]
end

begin library "learnocaml-app-common"
  comp_requires = "ppx_ocplib_i18n:asm"
  files = [
    "learnocaml_local_storage.ml" ( comp = ppx_js )
    "server_caller.ml" ( comp = ppx_js )
    "learnocaml_common.ml" ( comp = [ ppx_js ppx_ocplib_i18n ] )
  ]
  requires = [
    "ocplib-json-typed.browser"
    "js_of_ocaml"
    "js_of_ocaml.ppx"
    "js_of_ocaml.tyxml"
    "jsutils"
    "learnocaml-toplevel"
    "learnocaml-repository"
    "learnocaml-state"
    "learnocaml-sync"
    "ocplib_i18n"
  ]
end

begin program "learnocaml-main"
  comp_requires = "ppx_ocplib_i18n:asm"
  requires = [
    "ezjsonm"
    "ace"
    "learnocaml-repository"
    "learnocaml-app-common"
    "learnocaml-toplevel"
    "js_of_ocaml.ppx"
    "ocplib_i18n"
  ]
  files = [
    "learnocaml_index_main.ml" ( comp = [ ppx_js ppx_ocplib_i18n ])
  ]
  build_rules = [
    "%{learnocaml-main_FULL_DST_DIR}%/learnocaml-main.js" (
      build_target = true
      sources = %byte_exe( p = "learnocaml-main" )
      commands = [ {
        "js_of_ocaml"
           "+cstruct/cstruct.js"
           "%{ace_FULL_SRC_DIR}%/ace_bindings.js"
           %byte_exe( p = "learnocaml-main" )
      } ]
    )
  ]
end

begin program "learnocaml-exercise"
  comp_requires = "ppx_ocplib_i18n:asm"
  requires = [
    "ezjsonm"
    "grading-jsoo"
    "ace"
    "learnocaml-repository"
    "learnocaml-app-common"
    "learnocaml-toplevel"
    "js_of_ocaml.ppx"
    "ocplib_i18n"
  ]
  files = [
    "learnocaml_exercise_main.ml" ( comp = [ ppx_ocplib_i18n ppx_js ] )
  ]
  build_rules = [
    "%{learnocaml-exercise_FULL_DST_DIR}%/learnocaml-exercise.js" (
      build_target = true
      sources = %byte_exe( p = "learnocaml-exercise" )
      commands = [ {
        "js_of_ocaml"
           "+cstruct/cstruct.js"
           "%{ace_FULL_SRC_DIR}%/ace_bindings.js"
           %byte_exe( p = "learnocaml-exercise" )
      } ]
    )
  ]
end

