begin program "learnocaml-toplevel-worker"
  link += [ "-linkall" ]
  requires = [
    "jsutils"
    "js_of_ocaml"
    "js_of_ocaml.ppx"
    "toploop_jsoo"
    "toploop_results"
    "ocplib-ocamlres.runtime"
    "embedded_cmis"
    "grading"
  ]
  files = [
    "learnocaml_toplevel_worker_messages.mli"
    "learnocaml_toplevel_worker_main.ml" ( comp = ppx_js )
  ]
  build_rules = [
    "%{learnocaml-toplevel-worker_FULL_DST_DIR}%/learnocaml-toplevel-worker.js" (
      build_target = true
      sources = %byte_exe( p = "learnocaml-toplevel-worker" )
      commands = [ {
        "js_of_ocaml"
           "+dynlink.js"
           "+toplevel.js"
           "--toplevel"
           "--nocmis"
           %byte_exe( p = "learnocaml-toplevel-worker" )
      } ]
    )
  ]
end

begin library "learnocaml-toplevel-history"
  requires = [
    "ocplib-json-typed"
  ]
  files = [
    "learnocaml_toplevel_history.ml"
  ]
end

begin library "learnocaml-toplevel"
  requires = [
    "toploop_results"
    "jsutils"
    "js_of_ocaml"
    "js_of_ocaml.ppx"
    "ocp-indent-nlfork.lib"
    "ace"
    "ocplib-json-typed"
    "learnocaml-toplevel-history"
  ]
  files = [
    "learnocaml_toplevel_worker_messages.mli"
    "learnocaml_toplevel_worker_caller.ml" ( comp = ppx_js )
    "learnocaml_toplevel_output.ml" ( comp = ppx_js )
    "learnocaml_toplevel_input.ml" ( comp = ppx_js )
    "learnocaml_toplevel.ml"
  ]
end
