begin library "testing"
  comp_requires = "ppx_metaquot:asm"
  link += [ "-linkall" ]
  requires = [
    "ty"
    "toploop"
    "ppx_metaquot"
    "ppx_metaquot_lib"
    "ocplib-json-typed"
    "learnocaml-state"
    "learnocaml-repository"
  ]
  files = [
    "introspection_intf.mli"
    "introspection.ml" ( comp += [ "-ppx" %asm_exe( p = "ppx_metaquot") ] )
    "test_lib.ml" ( comp += [ "-ppx" %asm_exe( p = "ppx_metaquot") ])
  ]
end

embedded_grading_cmis = [

  "%{compiler-libs_FULL_DST_DIR}%/longident.cmi"
  "%{compiler-libs_FULL_DST_DIR}%/asttypes.cmi"
  "%{compiler-libs_FULL_DST_DIR}%/ast_helper.cmi"
  "%{compiler-libs_FULL_DST_DIR}%/ast_mapper.cmi"
  "%{compiler-libs_FULL_DST_DIR}%/parsetree.cmi"
  "%{compiler-libs_FULL_DST_DIR}%/location.cmi"
  "%{compiler-libs_FULL_DST_DIR}%/parse.cmi"
  "%{ty_FULL_DST_DIR}%/ty.cmi"
  "%{testing_FULL_DST_DIR}%/introspection_intf.cmi"
  "%{learnocaml-state_FULL_DST_DIR}%/learnocaml_report.cmi"
  "%{testing_FULL_DST_DIR}%/test_lib.cmi"

]

begin library "embedded_cmis"
  build_rules = [
    "embedded_cmis.ml" (
      build_target = true
      sources = embedded_cmis
      commands = [ {
        "ocp-ocamlres" "-format" "ocamlres" embedded_cmis
      } ( stdout = "embedded_cmis.ml" ) ]
    )
  ]
  files = [
    "embedded_cmis.ml"
  ]
  requires = [
      "ocplib-ocamlres.runtime"
  ]
end

begin library "grading"
  comp_requires = [ "ppx_metaquot:asm" "ppx_ocplib_i18n:asm" ]
  link += [ "-linkall" ]
  requires = [
    "testing"
    "ppx_metaquot"
    "ocplib-ocamlres.runtime"
    "embedded_cmis"
    "ocplib_i18n"
  ]
  build_rules = [
    "embedded_grading_cmis.ml" (
      build_target = true
      sources = embedded_grading_cmis
      commands = [ {
        "ocp-ocamlres" "-format" "ocamlres" embedded_grading_cmis
      } ( stdout = "embedded_grading_cmis.ml" ) ]
    )
  ]
  files = [
    "embedded_grading_cmis.ml"
    "grading.ml" ( comp += [ ppx_ocplib_i18n "-ppx" %asm_exe( p = "ppx_metaquot") ] )
  ]
end

begin library "grading-cli"
  requires = [
    "toploop_unix"
    "grading"
    "ocplib-ocamlres"
    "ezjsonm"
  ]
  files = [
    "grading_cli.ml"
    "grader_cli.ml"
  ]
end

begin program "learnocaml-grader"
  requires = [
    "grading-cli"
  ]
  files = [
    "grader_cli_main.ml"
  ]
end

begin library "grading-jsoo"
  requires = [
    "js_of_ocaml"
    "js_of_ocaml-lwt"
    "js_of_ocaml.syntax"
    "ezjsonm"
    "ocplib-json-typed.browser"
    "learnocaml-repository"
    "learnocaml-state"
    "js_of_ocaml.ppx"
  ]
  files = [
    "grader_jsoo_messages.ml"
    "grading_jsoo.ml" ( comp = ppx_js )
  ]
end

begin program "learnocaml-grader-worker"
  comp_requires = "ppx_ocplib_i18n:asm"
  requires = [
    "toploop_jsoo"
    "grading"
    "ezjsonm"
    "ocplib-json-typed.browser"
    "js_of_ocaml"
    "js_of_ocaml.syntax"
    "learnocaml-repository"
    "learnocaml-state"
    "jsutils"
    "js_of_ocaml.ppx"
    "ocplib_i18n"
  ]
  files = [
    "grader_jsoo_messages.ml"
    "grader_jsoo_worker.ml" ( comp = [ ppx_js ppx_ocplib_i18n]  )
  ]
  build_rules = [
    "%{learnocaml-grader-worker_FULL_DST_DIR}%/learnocaml-grader-worker.js" (
      build_target = true
      sources = %byte_exe( p = "learnocaml-grader-worker" )
      commands = [ {
        "js_of_ocaml"
           "+cstruct/cstruct.js"
           "+dynlink.js"
           "+toplevel.js"
           "--toplevel"
           "--nocmis"
           %byte_exe( p = "learnocaml-grader-worker" )
      } ]
    )
  ]
end
