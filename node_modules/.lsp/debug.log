Hello - from /home/manu/.vscode/extensions/jaredly.reason-vscode-1.7.0/bin.native.linux
Previous log location: /tmp/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json", "globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true,"useOldDuneProcess":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/manu/Documentos/irit/learn-ocaml-editor/src/app/learnocaml_exercise_main.ml","languageId":"ocaml","version":1,"text":"(* This file is part of Learn-OCaml.\n *\n * Copyright (C) 2019 OCaml Software Foundation.\n * Copyright (C) 2016-2018 OCamlPro.\n *\n * Learn-OCaml is distributed under the terms of the MIT license. See the\n * included LICENSE file for details. *)\n\nopen Js_utils\nopen Lwt.Infix\nopen Learnocaml_common\nopen Learnocaml_data\n\nmodule H = Tyxml_js.Html\n\nlet init_tabs, select_tab =\n  let names = [ \"text\" ; \"toplevel\" ; \"report\" ; \"editor\"; \"meta\" ] in\n  let current = ref \"text\" in\n  let select_tab name =\n    set_arg \"tab\" name ;\n    Manip.removeClass\n      (find_component (\"learnocaml-exo-button-\" ^ !current))\n      \"front-tab\" ;\n    Manip.removeClass\n      (find_component (\"learnocaml-exo-tab-\" ^ !current))\n      \"front-tab\" ;\n    Manip.enable\n      (find_component (\"learnocaml-exo-button-\" ^ !current)) ;\n    Manip.addClass\n      (find_component (\"learnocaml-exo-button-\" ^ name))\n      \"front-tab\" ;\n    Manip.addClass\n      (find_component (\"learnocaml-exo-tab-\" ^ name))\n      \"front-tab\" ;\n    Manip.disable\n      (find_component (\"learnocaml-exo-button-\" ^ name)) ;\n    current := name in\n  let init_tabs () =\n    current := begin try\n        let requested = arg \"tab\" in\n        if List.mem requested names then requested else \"text\"\n      with Not_found -> \"text\"\n    end ;\n    List.iter\n      (fun name ->\n         Manip.removeClass\n           (find_component (\"learnocaml-exo-button-\" ^ name))\n           \"front-tab\" ;\n         Manip.removeClass\n           (find_component (\"learnocaml-exo-tab-\" ^ name))\n           \"front-tab\" ;\n         Manip.Ev.onclick\n           (find_component (\"learnocaml-exo-button-\" ^ name))\n           (fun _ -> select_tab name ; true))\n      names ;\n    select_tab !current in\n  init_tabs, select_tab\n\nlet get_grade =\n  let get_worker = get_worker_code \"learnocaml-grader-worker.js\" in\n  fun ?callback ?timeout exercise ->\n    get_worker () >>= fun worker_js_file ->\n    Grading_jsoo.get_grade ~worker_js_file ?callback ?timeout exercise\n\n\nlet display_report exo report =\n  let score, _failed = Report.result report in\n  let report_button = find_component \"learnocaml-exo-button-report\" in\n  Manip.removeClass report_button \"success\" ;\n  Manip.removeClass report_button \"failure\" ;\n  Manip.removeClass report_button \"partial\" ;\n  let grade =\n    let max = Learnocaml_exercise.(access File.max_score exo) in\n    if max = 0 then 999 else score * 100 / max\n  in\n  if grade >= 100 then begin\n    Manip.addClass report_button \"success\" ;\n    Manip.replaceChildren report_button\n      Tyxml_js.Html5.[ pcdata [%i\"Report\"] ]\n  end else if grade = 0 then begin\n    Manip.addClass report_button \"failure\" ;\n    Manip.replaceChildren report_button\n      Tyxml_js.Html5.[ pcdata [%i\"Report\"] ]\n  end else begin\n    Manip.addClass report_button \"partial\" ;\n    let pct = Format.asprintf \"%2d%%\" grade in\n    Manip.replaceChildren report_button\n      Tyxml_js.Html5.[ pcdata [%i\"Report\"] ;\n                       span ~a: [ a_class [ \"score\" ] ] [ pcdata pct ]]\n  end ;\n  let report_container = find_component \"learnocaml-exo-tab-report\" in\n  Manip.setInnerHtml report_container\n    (Format.asprintf \"%a\" Report.(output_html ~bare: true) report) ;\n  grade\n\nlet display_descr ex_meta =\n  let open Tyxml_js.Html5 in\n  let open Learnocaml_data.Exercise in\n  match ex_meta.Meta.short_description with\n  | None -> div ~a:[ a_class [ \"descr\" ] ] []\n  | Some descr ->\n      div ~a:[ a_class [ \"descr\" ] ] [\n        h2 ~a:[ a_class [ \"learnocaml-exo-meta-category\" ] ]\n          [ pcdata ex_meta.Meta.title ] ;\n        p [ pcdata descr ] ;\n      ]\n\nlet display_stars ex_meta =\n  let open Tyxml_js.Html5 in\n  let open Learnocaml_data.Exercise in\n  let stars =\n    let num = 5 * int_of_float (ex_meta.Meta.stars *. 2.) in\n    let num = max (min num 40) 0 in\n    let alt = Format.asprintf [%if\"difficulty: %d / 40\"] num in\n    let src = Format.asprintf \"/icons/stars_%02d.svg\" num in\n    img ~alt ~src ()\n  in\n  div ~a:[ a_class [ \"stars\" ] ] [\n    p [\n      pcdata [%i \"Difficulty:\"];\n      pcdata \" \"; (* lets not add whitespaces into translation strings (double\n                     colon are mandatory, though, since rules are not the same\n                     in english or french for example). *)\n      stars\n    ]\n  ]\n\nlet display_kind ex_meta =\n  let open Tyxml_js.Html5 in\n  let open Learnocaml_data.Exercise in\n  let kind_repr = string_of_exercise_kind ex_meta.Meta.kind in\n  div ~a:[ a_class [ \"length\" ] ] [\n    p [ pcdata (Format.sprintf [%if \"Kind: %s\"] kind_repr) ]\n  ]\n\nlet exercise_link ?(cl = []) id content =\n  let open Tyxml_js.Html5 in\n  a ~a:[ a_href (\"/exercises/\"^id^\"/\") ;\n         a_class cl ;\n       ]\n    content\n\nlet display_exercise_meta id meta content_id =\n  let content = find_component content_id in\n  let descr =\n    exercise_link ~cl:[ \"exercise\" ] id [\n      display_descr meta ;\n      H.div ~a:[  ] [\n        display_stars meta ;\n        display_kind meta ;\n      ]\n    ]\n  in\n  Manip.replaceChildren content [ descr ];\n  Lwt.return ()\n\nlet display_list ?(sep=Tyxml_js.Html5.pcdata \", \") l =\n  let open Tyxml_js.Html5 in\n  let rec gen acc = function\n    | [] -> [ pcdata \"\" ]\n    | a :: [] -> a :: acc\n    | a :: ((_ :: _) as rem) ->\n        gen (sep :: (a  :: acc)) rem\n  in\n  gen [] l |> List.rev\n\nlet get_skill_index token =\n  let index = lazy (\n    retrieve (Learnocaml_api.Exercise_index token)\n    >|= fun (index, _) ->\n    Exercise.Index.fold_exercises (fun (req, focus) id meta ->\n        let add sk id map =\n          SMap.add sk\n            (SSet.add id (try SMap.find sk map with Not_found -> SSet.empty))\n            map\n        in\n        List.fold_left (fun acc sk -> add sk id acc) req\n          meta.Exercise.Meta.requirements,\n        List.fold_left (fun acc sk -> add sk id acc) focus\n          meta.Exercise.Meta.focus\n      ) (SMap.empty, SMap.empty) index\n  ) in\n  fun skill ->\n    Lazy.force index >|= fun (req, focus) ->\n    try match skill with\n      | `Requirements s -> SSet.elements (SMap.find s req)\n      | `Focus s -> SSet.elements (SMap.find s focus)\n    with Not_found -> []\n\nlet display_skill_meta _skill exs content_id =\n  let content = find_component content_id in\n  Manip.replaceChildren content\n    (display_list @@\n     List.map (fun ex_id ->\n         exercise_link ex_id [Tyxml_js.Html5.pcdata ex_id]) exs);\n  Lwt.return ()\n\nlet display_link onclick content_id value =\n  let open Tyxml_js.Html5 in\n  let cid = Format.asprintf \"%s-%s\" content_id value in\n  let expand_id = Format.asprintf \"%s-expand\" cid in\n  let displayed = ref false in\n  let onclick _ =\n    let exp = find_component expand_id in\n    if not (!displayed) then\n      begin\n        ignore @@ onclick cid;\n        displayed := true;\n        Manip.removeChildren exp;\n        Manip.appendChild exp (pcdata \"[-]\")\n      end\n    else\n      begin\n        Manip.removeChildren (find_component cid);\n        displayed := false;\n        Manip.removeChildren exp;\n        Manip.appendChild exp (pcdata \"[+]\")\n      end;\n    true\n  in\n  div [\n    p ~a:[ a_class [ \"learnocaml-exo-expandable-link\" ];\n           a_onclick onclick;\n         ]\n      [\n        span ~a:[ a_id expand_id; a_class [\"expand-sign\"] ] [ pcdata \"[+]\" ];\n        pcdata value\n      ] ;\n    div ~a:[a_id cid;\n            a_class [ \"learnocaml-exo-meta-category\" ] ] [] ]\n\nlet display_skill_link index content_id s =\n  let skill = match s with `Focus s | `Requirements s -> s in\n  display_link (display_skill_meta s index) content_id skill\n\nlet display_exercise_link content_id meta e =\n  display_link (display_exercise_meta e meta) content_id e\n\nlet display_authors authors =\n  let open Tyxml_js.Html5 in\n  let author (name, mail) =\n    span [ pcdata name;\n           pcdata \" <\";\n           a ~a:[ a_href (\"mailto:\" ^ mail) ]\n             [ pcdata mail ];\n           pcdata \">\"\n         ] in\n  display_list @@ List.map author authors\n\nlet display_meta token ex_meta id =\n  let open Learnocaml_data.Exercise in\n  let open Tyxml_js.Html5 in\n  let ident =\n    Format.asprintf \"%s %s\" [%i \"Identifier:\" ] id in\n  let opt l f = match l with [] -> None | l -> Some (f l) in\n  let authors =\n    opt ex_meta.Meta.author @@ fun author ->\n    let title = match author with [_] -> [%i\"Author\"] | _ -> [%i\"Authors\"] in\n    span [ pcdata title; pcdata \" \" ] ::\n    display_authors author\n  in\n  retrieve (Learnocaml_api.Exercise_index token)\n  >|= fun (index, _) ->\n  let req_map, focus_map =\n    Exercise.Index.fold_exercises (fun (req, focus) id meta ->\n        let add sk id map =\n          SMap.add sk\n            (SSet.add id (try SMap.find sk map with Not_found -> SSet.empty))\n            map\n        in\n        List.fold_left (fun acc sk -> add sk id acc) req\n          meta.Exercise.Meta.requirements,\n        List.fold_left (fun acc sk -> add sk id acc) focus\n          meta.Exercise.Meta.focus\n      ) (SMap.empty, SMap.empty) index\n  in\n  let focus =\n    opt ex_meta.Meta.focus @@ fun focus ->\n    [%i \"Skills trained:\"],\n    display_list ~sep:(pcdata \"\") @@\n    List.map (fun s ->\n        display_skill_link\n          (try SSet.elements (SMap.find s focus_map) with Not_found -> [])\n          \"learnocaml-exo-focus-meta\" (`Focus s))\n      focus in\n  let requirements =\n    opt ex_meta.Meta.requirements @@ fun requirements ->\n    [%i \"Skills required:\"],\n      display_list ~sep:(pcdata \"\") @@\n      List.map (fun s ->\n          display_skill_link\n            (try SSet.elements (SMap.find s req_map) with Not_found -> [])\n            \"learnocaml-exo-requirements-meta\" (`Requirements s))\n        requirements in\n  let backward =\n    let l =\n      List.fold_left (fun acc id ->\n          match Exercise.Index.find_opt index id with\n          | Some meta ->\n              display_exercise_link \"learnocaml-exo-backward-meta\" meta id\n              :: acc\n          | None -> acc)\n        []\n        (List.rev ex_meta.Meta.backward)\n    in\n    opt l @@ fun l ->\n    [%i\"Previous exercises:\"], display_list ~sep:(pcdata \"\") l\n  in\n  let forward =\n    let l =\n      List.fold_left (fun acc id ->\n          match Exercise.Index.find_opt index id with\n          | Some meta ->\n              display_exercise_link \"learnocaml-exo-backward-meta\" meta id\n              :: acc\n          | None -> acc)\n        []\n        (List.rev ex_meta.Meta.forward)\n    in\n    opt l @@ fun l ->\n    [%i\"Next exercises:\"], display_list ~sep:(pcdata \"\") l\n  in\n  let tab = find_component \"learnocaml-exo-tab-meta\" in\n  Manip.replaceChildren tab @@\n  Tyxml_js.Html5.([\n    h1 ~a:[ a_class [ \"learnocaml-exo-meta-title\" ] ]\n      [ pcdata [%i \"Metadata\" ] ] ;\n\n    div ~a:[ a_id \"learnocaml-exo-content-meta\" ]\n      (display_descr ex_meta ::\n       display_stars ex_meta ::\n       display_kind ex_meta ::\n       p [ pcdata ident ] ::\n       (match authors with Some a -> p a | None -> div []) ::\n       List.map (function\n           | Some (title, values) ->\n               div\n                 (h2 ~a:[ a_class [ \"learnocaml-exo-meta-category-title\" ] ]\n                    [ pcdata title ] ::\n                  values)\n           | None -> div [])\n         [ focus ; requirements ; backward ; forward ])\n  ])\n\nlet set_string_translations () =\n  let translations = [\n    \"txt_preparing\", [%i\"Preparing the environment\"];\n    \"learnocaml-exo-button-editor\", [%i\"Editor\"];\n    \"learnocaml-exo-button-toplevel\", [%i\"Toplevel\"];\n    \"learnocaml-exo-button-report\", [%i\"Report\"];\n    \"learnocaml-exo-button-text\", [%i\"Exercise\"];\n    \"learnocaml-exo-button-meta\", [%i\"Details\"];\n    \"learnocaml-exo-editor-pane\", [%i\"Editor\"];\n    \"txt_grade_report\", [%i\"Click the Grade button to get your report\"];\n  ] in\n  List.iter\n    (fun (id, text) ->\n       Manip.setInnerHtml (find_component id) text)\n    translations\n\nlet is_readonly = ref false\n\nlet make_readonly () =\n  is_readonly := true;\n  alert ~title:[%i\"TIME'S UP\"]\n    [%i\"The deadline for this exercise has expired. Any changes you make \\\n        from now on will remain local only.\"]\n\nlet local_save ace id =\n  let key = Learnocaml_local_storage.exercise_state id in\n  let ans =\n    try Learnocaml_local_storage.retrieve key with Not_found ->\n      Answer.{solution = \"\"; mtime = 0.; report = None; grade = None}\n  in\n  Learnocaml_local_storage.store key\n    { ans with Answer.solution = Ace.get_contents ace;\n               mtime = gettimeofday () }\n\n\nlet () =\n  Lwt.async_exception_hook := begin fun e ->\n    Firebug.console##log (Js.string\n                            (Printexc.to_string e ^\n                             if Printexc.backtrace_status () then\n                               Printexc.get_backtrace ()\n                             else \"\"));\n    match e with\n    | Failure message -> fatal message\n    | Server_caller.Cannot_fetch message -> fatal message\n    | exn -> fatal (Printexc.to_string exn)\n  end ;\n  (match Js_utils.get_lang() with Some l -> Ocplib_i18n.set_lang l | None -> ());\n  Lwt.async @@ fun () ->\n  set_string_translations ();\n  Learnocaml_local_storage.init () ;\n  let token =\n    try\n      Learnocaml_local_storage.(retrieve sync_token) |>\n      Lwt.return\n    with Not_found ->\n      retrieve (Learnocaml_api.Nonce ())\n      >>= fun nonce ->\n      ask_string ~title:\"Secret\"\n        [H.pcdata [%i\"Enter the secret\"]]\n      >>= fun secret ->\n      retrieve\n        (Learnocaml_api.Create_token (Sha.sha512 (nonce ^ Sha.sha512 secret), None, None))\n      >|= fun token ->\n      Learnocaml_local_storage.(store sync_token) token;\n      token\n  in\n  (* ---- launch everything --------------------------------------------- *)\n  let toplevel_buttons_group = button_group () in\n  disable_button_group toplevel_buttons_group (* enabled after init *) ;\n  let toplevel_toolbar = find_component \"learnocaml-exo-toplevel-toolbar\" in\n  let editor_toolbar = find_component \"learnocaml-exo-editor-toolbar\" in\n  let nickname_div = find_component \"learnocaml-nickname\" in\n  (match Learnocaml_local_storage.(retrieve nickname) with\n   | nickname -> Manip.setInnerText nickname_div nickname\n   | exception Not_found -> ());\n  let toplevel_button = button ~container: toplevel_toolbar ~theme: \"dark\" in\n  let editor_button = button ~container: editor_toolbar ~theme: \"light\" in\n  let id = match Url.Current.path with\n    | \"\" :: \"exercises\" :: p | \"exercises\" :: p ->\n        String.concat \"/\" (List.map Url.urldecode (List.filter ((<>) \"\") p))\n    | _ -> arg \"id\"\n  in\n  Dom_html.document##.title :=\n    Js.string (id ^ \" - \" ^ \"Learn OCaml\" ^\" v.\"^ Learnocaml_api.version);\n  let exercise_fetch =\n    token >>= fun token ->\n    retrieve (Learnocaml_api.Exercise (token, id))\n  in\n  let after_init top =\n    exercise_fetch >>= fun (_meta, exo, _deadline) ->\n    begin match Learnocaml_exercise.(decipher File.prelude exo) with\n      | \"\" -> Lwt.return true\n      | prelude ->\n          Learnocaml_toplevel.load ~print_outcome:true top\n            ~message: [%i\"loading the prelude...\"]\n            prelude\n    end >>= fun r1 ->\n    Learnocaml_toplevel.load ~print_outcome:false top\n      (Learnocaml_exercise.(decipher File.prepare exo)) >>= fun r2 ->\n    if not r1 || not r2 then failwith [%i\"error in prelude\"] ;\n    Learnocaml_toplevel.set_checking_environment top >>= fun () ->\n    Lwt.return () in\n  let timeout_prompt =\n    Learnocaml_toplevel.make_timeout_popup\n      ~on_show: (fun () -> select_tab \"toplevel\")\n      () in\n  let flood_prompt =\n    Learnocaml_toplevel.make_flood_popup\n      ~on_show: (fun () -> select_tab \"toplevel\")\n      () in\n  let history =\n    let storage_key =\n      Learnocaml_local_storage.exercise_toplevel_history id in\n    let on_update self =\n      Learnocaml_local_storage.store storage_key\n        (Learnocaml_toplevel_history.snapshot self) in\n    let snapshot =\n      Learnocaml_local_storage.retrieve storage_key in\n    Learnocaml_toplevel_history.create\n      ~gettimeofday\n      ~on_update\n      ~max_size: 99\n      ~snapshot () in\n  let toplevel_launch =\n    create_toplevel\n      ~after_init ~timeout_prompt ~flood_prompt\n      ~on_disable_input: (fun _ -> disable_button_group toplevel_buttons_group)\n      ~on_enable_input: (fun _ -> enable_button_group toplevel_buttons_group)\n      ~container:(find_component \"learnocaml-exo-toplevel-pane\")\n      ~history () in\n  init_tabs () ;\n  toplevel_launch >>= fun top ->\n  exercise_fetch >>= fun (ex_meta, exo, deadline) ->\n  (match deadline with\n   | None -> ()\n   | Some 0. -> make_readonly ()\n   | Some t ->\n       match Manip.by_id \"learnocaml-countdown\" with\n       | Some elt -> countdown elt t ~ontimeout:make_readonly\n       | None -> ());\n  let solution =\n    match Learnocaml_local_storage.(retrieve (exercise_state id)) with\n    | { Answer.report = Some report ; solution ; _ } ->\n        let _ : int = display_report exo report in\n        Some solution\n    | { Answer.report = None ; solution ; _ } ->\n        Some solution\n    | exception Not_found -> None in\n  (* ---- details pane -------------------------------------------------- *)\n  let load_meta () =\n    Lwt.async (fun () ->\n        token >>= fun token ->\n        display_meta token ex_meta id)\n  in\n  if arg \"tab\" = \"meta\" then load_meta () else\n    Manip.Ev.onclick (find_component \"learnocaml-exo-button-meta\") (fun _ ->\n        load_meta ();\n        select_tab \"meta\";\n        true);\n  (* ---- toplevel pane ------------------------------------------------- *)\n  begin toplevel_button\n      ~group: toplevel_buttons_group\n      ~icon: \"cleanup\" [%i\"Clear\"] @@ fun () ->\n    Learnocaml_toplevel.clear top ;\n    Lwt.return ()\n  end ;\n  begin toplevel_button\n      ~icon: \"reload\" [%i\"Reset\"] @@ fun () ->\n    toplevel_launch >>= fun top ->\n    disabling_button_group toplevel_buttons_group (fun () -> Learnocaml_toplevel.reset top)\n  end ;\n  begin toplevel_button\n      ~group: toplevel_buttons_group\n      ~icon: \"run\" [%i\"Eval phrase\"] @@ fun () ->\n    Learnocaml_toplevel.execute top ;\n    Lwt.return ()\n  end ;\n  (* ---- text pane ----------------------------------------------------- *)\n    let text_container = find_component \"learnocaml-exo-tab-text\" in\n    let text_iframe = Dom_html.createIframe Dom_html.document in\n    Manip.replaceChildren text_container\n      Tyxml_js.Html5.[ h1 [ pcdata ex_meta.Exercise.Meta.title ] ;\n                       Tyxml_js.Of_dom.of_iFrame text_iframe ] ;\n  (* ---- editor pane --------------------------------------------------- *)\n  let editor_pane = find_component \"learnocaml-exo-editor-pane\" in\n  let editor = Ocaml_mode.create_ocaml_editor (Tyxml_js.To_dom.of_div editor_pane) in\n  let ace = Ocaml_mode.get_editor editor in\n  Ace.set_contents ace ~reset_undo:true\n    (match solution with\n     | Some solution -> solution\n     | None -> Learnocaml_exercise.(access File.template exo)) ;\n  Ace.set_font_size ace 18;\n  begin editor_button\n      ~icon: \"cleanup\" [%i\"Reset\"] @@ fun () ->\n    confirm ~title:[%i\"START FROM SCRATCH\"]\n      [H.pcdata [%i\"This will discard all your edits. Are you sure?\"]]\n      (fun () ->\n         Ace.set_contents ace (Learnocaml_exercise.(access File.template exo)));\n    Lwt.return ()\n  end ;\n  begin editor_button\n      ~icon: \"sync\" [%i\"Sync\"] @@ fun () ->\n    token >>= fun token ->\n    sync_exercise token id ~editor:(Ace.get_contents ace) >|= fun _save -> ()\n  end ;\n  begin editor_button\n      ~icon: \"download\" [%i\"Download\"] @@ fun () ->\n    let name = id ^ \".ml\" in\n    let contents = Js.string (Ace.get_contents ace) in\n    Learnocaml_common.fake_download ~name ~contents ;\n    Lwt.return ()\n  end ;\n  begin editor_button\n      ~group: toplevel_buttons_group\n      ~icon: \"run\" [%i\"Eval code\"] @@ fun () ->\n    Learnocaml_toplevel.execute_phrase top (Ace.get_contents ace) >>= fun _ ->\n    select_tab \"toplevel\";\n    Lwt.return_unit\n  end ;\n  let typecheck set_class =\n    Learnocaml_toplevel.check top (Ace.get_contents ace) >>= fun res ->\n    let error, warnings =\n      match res with\n      | Toploop_results.Ok ((), warnings) -> None, warnings\n      | Toploop_results.Error (err, warnings) -> Some err, warnings in\n    let transl_loc { Toploop_results.loc_start ; loc_end } =\n      { Ocaml_mode.loc_start ; loc_end } in\n    let error = match error with\n      | None -> None\n      | Some { Toploop_results.locs ; msg ; if_highlight } ->\n          Some { Ocaml_mode.locs = List.map transl_loc locs ;\n                 msg = (if if_highlight <> \"\" then if_highlight else msg) } in\n    let warnings =\n      List.map\n        (fun { Toploop_results.locs ; msg ; if_highlight } ->\n           { Ocaml_mode.loc = transl_loc (List.hd locs) ;\n             msg = (if if_highlight <> \"\" then if_highlight else msg) })\n        warnings in\n    Ocaml_mode.report_error ~set_class editor error warnings  >>= fun () ->\n    Ace.focus ace ;\n    Lwt.return () in\n(*------------- prelude -----------------*)\nlet prelude_pane =  find_component \"learnocaml-exo-prelude\" in\n  let prelude = Learnocaml_exercise.(decipher File.prelude exo) in\n  if prelude <> \"\" then begin\n    let open Tyxml_js.Html5 in\n    let state = ref (match arg \"prelude\" with\n        | exception Not_found -> true\n        | \"shown\" -> true\n        | \"hidden\" -> false\n        | _ -> failwith \"Bad format for argument prelude.\") in\n    let prelude_btn = button [] in\n    let prelude_title = h1 [ pcdata [%i\"OCaml prelude\"] ;\n                             prelude_btn ] in\n    let prelude_container =\n      pre ~a: [ a_class [ \"toplevel-code\" ] ]\n        (Learnocaml_toplevel_output.format_ocaml_code prelude) in\n    let update () =\n      if !state then begin\n        Manip.replaceChildren prelude_btn [ pcdata (\"↳ \"^[%i\"Hide\"]) ] ;\n        Manip.SetCss.display prelude_container \"\" ;\n        Manip.SetCss.top editor_pane \"193px\" ;\n        Manip.SetCss.bottom editor_pane \"40px\" ;\n        Ace.resize ace true;\n        set_arg \"prelude\" \"shown\"\n      end else begin\n        Manip.replaceChildren prelude_btn [ pcdata (\"↰ \"^[%i\"Show\"]) ] ;\n        Manip.SetCss.display prelude_container \"none\" ;\n        Manip.SetCss.top editor_pane \"43px\" ;\n        Manip.SetCss.bottom editor_pane \"40px\" ;\n        Ace.resize ace true;\n        set_arg \"prelude\" \"hidden\"\n      end in\n    update () ;\n    Manip.Ev.onclick prelude_btn\n      (fun _ -> state := not !state ; update () ; true) ;\n    Manip.appendChildren prelude_pane\n      [ prelude_title ; prelude_container ]\n  end ;\n  Js.Opt.case\n    (text_iframe##.contentDocument)\n    (fun () -> failwith \"cannot edit iframe document\")\n    (fun d ->\n       d##open_;\n       d##write (Js.string (exercise_text ex_meta exo));\n       d##close) ;\n  (* ---- main toolbar -------------------------------------------------- *)\n  let exo_toolbar = find_component \"learnocaml-exo-toolbar\" in\n  let toolbar_button = button ~container: exo_toolbar ~theme: \"light\" in\n  begin toolbar_button\n      ~icon: \"list\" [%i\"Exercises\"] @@ fun () ->\n    Dom_html.window##.location##assign\n      (Js.string \"/index.html#activity=exercises\") ;\n    Lwt.return ()\n  end ;\n  let messages = Tyxml_js.Html5.ul [] in\n  let callback text =\n    Manip.appendChild messages Tyxml_js.Html5.(li [ pcdata text ]) in\n  let worker =\n    ref (get_grade ~callback exo)\n  in\n  begin toolbar_button\n      ~icon: \"typecheck\" [%i\"Compile\"] @@ fun () ->\n    typecheck true\n  end;\n  begin toolbar_button\n      ~icon: \"reload\" [%i\"Grade!\"] @@ fun () ->\n    let aborted, abort_message =\n      let t, u = Lwt.task () in\n      let btn = Tyxml_js.Html5.(button [ pcdata [%i\"abort\"] ]) in\n      Manip.Ev.onclick btn (fun _ -> Lwt.wakeup u () ; true) ;\n      let div =\n        Tyxml_js.Html5.(div ~a: [ a_class [ \"dialog\" ] ]\n                          [ pcdata [%i\"Grading is taking a lot of time, \"] ;\n                            btn ;\n                            pcdata \" ?\" ]) in\n      Manip.SetCss.opacity div (Some \"0\") ;\n      t, div in\n    Manip.replaceChildren messages\n      Tyxml_js.Html5.[ li [ pcdata [%i\"Launching the grader\"] ] ] ;\n    let submit_report = not !is_readonly in (* Don't count the grading time *)\n    show_loading ~id:\"learnocaml-exo-loading\" [ messages ; abort_message ]\n    @@ fun () ->\n    Lwt_js.sleep 1. >>= fun () ->\n    let solution = Ace.get_contents ace in\n    Learnocaml_toplevel.check top solution >>= fun res ->\n    match res with\n    | Toploop_results.Ok ((), _) ->\n        let grading =\n          Lwt.finalize\n            (fun () ->\n               !worker >>= fun w ->\n               w solution >>= fun (report, _, _, _) ->\n               Lwt.return report)\n            (fun () ->\n               worker := get_grade ~callback exo;\n               Lwt.return_unit)\n        in\n        let abortion =\n          Lwt_js.sleep 5. >>= fun () ->\n          Manip.SetCss.opacity abort_message (Some \"1\") ;\n          aborted >>= fun () ->\n          Lwt.return Learnocaml_report.[ Message ([ Text [%i\"Grading aborted by user.\"] ], Failure) ] in\n        Lwt.pick [ grading ; abortion ] >>= fun report ->\n        let grade = display_report exo report in\n        let editor, answer =\n          if submit_report then\n            None,\n            Some { Answer.grade = Some grade ;\n                   solution ;\n                   report = Some report ;\n                   mtime = max_float } (* To ensure server time will be used *)\n          else\n            Some solution, None\n        in\n        token >>= fun token ->\n        sync_exercise token id ?answer ?editor >>= fun _save ->\n        select_tab \"report\" ;\n        Lwt_js.yield () >>= fun () ->\n        Ace.focus ace ;\n        Lwt.return ()\n    | Toploop_results.Error _ ->\n        let msg =\n          Learnocaml_report.[ Text [%i\"Error in your code.\"] ; Break ;\n                   Text [%i\"Cannot start the grader if your code does not typecheck.\"] ] in\n        let report = Learnocaml_report.[ Message (msg, Failure) ] in\n        let grade = display_report exo report in\n        Learnocaml_local_storage.(store (exercise_state id))\n          { Answer.grade = Some grade ; solution ; report = Some report ;\n            mtime = gettimeofday () } ;\n        select_tab \"report\" ;\n        Lwt_js.yield () >>= fun () ->\n        Ace.focus ace ;\n        typecheck true\n  end ;\n  Window.onunload (fun _ev -> local_save ace id; true);\n  (* ---- return -------------------------------------------------------- *)\n  toplevel_launch >>= fun _ ->\n  typecheck false >>= fun () ->\n  hide_loading ~id:\"learnocaml-exo-loading\" () ;\n  Lwt.return ()\n;;\n"}}}
Found a `dune` file at /home/manu/Documentos/irit/learn-ocaml-editor/src/app
]] Making a new jbuilder package at /home/manu/Documentos/irit/learn-ocaml-editor/src/app
=== Project root: /home/manu/Documentos/irit/learn-ocaml-editor
Detected `opam` dependency manager for local use
Get ocaml stdlib dirs
Old dune process
=== Build dir:    /home/manu/Documentos/irit/learn-ocaml-editor/_build
Include subdirs? no :/
Got a compiled base /home/manu/Documentos/irit/learn-ocaml-editor/_build/default/src/app/.learnocaml_app_common.objs/byte
Local file: /home/manu/Documentos/irit/learn-ocaml-editor/src/app/learnocaml_exercise_main.ml
Local .cmt file: /home/manu/Documentos/irit/learn-ocaml-editor/_build/default/src/app/.learnocaml_app_common.objs/byte/learnocaml_app_common__Learnocaml_exercise_main.cmt
Local file: /home/manu/Documentos/irit/learn-ocaml-editor/src/app/server_caller.mli
Local .cmt file: /home/manu/Documentos/irit/learn-ocaml-editor/_build/default/src/app/.learnocaml_app_common.objs/byte/learnocaml_app_common__Server_caller.cmt
Local file: /home/manu/Documentos/irit/learn-ocaml-editor/src/app/learnocaml_exercise_main.mli
Local .cmt file: /home/manu/Documentos/irit/learn-ocaml-editor/_build/default/src/app/.learnocaml_app_common.objs/byte/learnocaml_app_common__Learnocaml_exercise_main.cmt
Local file: /home/manu/Documentos/irit/learn-ocaml-editor/src/app/learnocaml_teacher_tab.mli
Local .cmt file: /home/manu/Documentos/irit/learn-ocaml-editor/_build/default/src/app/.learnocaml_app_common.objs/byte/learnocaml_app_common__Learnocaml_teacher_tab.cmt
Local file: /home/manu/Documentos/irit/learn-ocaml-editor/src/app/learnocaml_index_main.ml
Local .cmt file: /home/manu/Documentos/irit/learn-ocaml-editor/_build/default/src/app/.learnocaml_app_common.objs/byte/learnocaml_app_common__Learnocaml_index_main.cmt
Local file: /home/manu/Documentos/irit/learn-ocaml-editor/src/app/learnocaml_local_storage.mli
Local .cmt file: /home/manu/Documentos/irit/learn-ocaml-editor/_build/default/src/app/.learnocaml_app_common.objs/byte/learnocaml_app_common__Learnocaml_local_storage.cmt
Local file: /home/manu/Documentos/irit/learn-ocaml-editor/src/app/learnocaml_common.ml
Local .cmt file: /home/manu/Documentos/irit/learn-ocaml-editor/_build/default/src/app/.learnocaml_app_common.objs/byte/learnocaml_app_common__Learnocaml_common.cmt
Local file: /home/manu/Documentos/irit/learn-ocaml-editor/src/app/learnocaml_common.mli
Local .cmt file: /home/manu/Documentos/irit/learn-ocaml-editor/_build/default/src/app/.learnocaml_app_common.objs/byte/learnocaml_app_common__Learnocaml_common.cmt
Local file: /home/manu/Documentos/irit/learn-ocaml-editor/src/app/learnocaml_local_storage.ml
Local .cmt file: /home/manu/Documentos/irit/learn-ocaml-editor/_build/default/src/app/.learnocaml_app_common.objs/byte/learnocaml_app_common__Learnocaml_local_storage.cmt
Local file: /home/manu/Documentos/irit/learn-ocaml-editor/src/app/server_caller.ml
Local .cmt file: /home/manu/Documentos/irit/learn-ocaml-editor/_build/default/src/app/.learnocaml_app_common.objs/byte/learnocaml_app_common__Server_caller.cmt
Local file: /home/manu/Documentos/irit/learn-ocaml-editor/src/app/learnocaml_teacher_tab.ml
Local .cmt file: /home/manu/Documentos/irit/learn-ocaml-editor/_build/default/src/app/.learnocaml_app_common.objs/byte/learnocaml_app_common__Learnocaml_teacher_tab.cmt
Local file: /home/manu/Documentos/irit/learn-ocaml-editor/src/app/learnocaml_student_view.ml
Local .cmt file: /home/manu/Documentos/irit/learn-ocaml-editor/_build/default/src/app/.learnocaml_app_common.objs/byte/learnocaml_app_common__Learnocaml_student_view.cmt
Found jsutils defined in /home/manu/Documentos/irit/learn-ocaml-editor/src/app/../utils/dune
Compiled base: /home/manu/Documentos/irit/learn-ocaml-editor/_build/default/src/app/../utils/.jsutils.objs/byte
Found toploop_results defined in /home/manu/Documentos/irit/learn-ocaml-editor/src/app/../toploop/dune
Compiled base: /home/manu/Documentos/irit/learn-ocaml-editor/_build/default/src/app/../toploop/.toploop_results.objs/byte
Found learnocaml_toplevel_worker_messages defined in /home/manu/Documentos/irit/learn-ocaml-editor/src/app/../toplevel/dune
Compiled base: /home/manu/Documentos/irit/learn-ocaml-editor/_build/default/src/app/../toplevel/.learnocaml_toplevel_worker_messages.objs/byte
Found learnocaml_data defined in /home/manu/Documentos/irit/learn-ocaml-editor/src/app/../state/dune
Compiled base: /home/manu/Documentos/irit/learn-ocaml-editor/_build/default/src/app/../state/.learnocaml_data.objs/byte
Found learnocaml_repository defined in /home/manu/Documentos/irit/learn-ocaml-editor/src/app/../repo/dune
Compiled base: /home/manu/Documentos/irit/learn-ocaml-editor/_build/default/src/app/../repo/.learnocaml_repository.objs/byte
Found learnocaml_ppx_metaquot_lib defined in /home/manu/Documentos/irit/learn-ocaml-editor/src/app/../ppx-metaquot/dune
Compiled base: /home/manu/Documentos/irit/learn-ocaml-editor/_build/default/src/app/../ppx-metaquot/.learnocaml_ppx_metaquot_lib.objs/byte
Found learnocaml_report defined in /home/manu/Documentos/irit/learn-ocaml-editor/src/app/../grader/dune
Compiled base: /home/manu/Documentos/irit/learn-ocaml-editor/_build/default/src/app/../grader/.learnocaml_report.objs/byte
Found editor_lib defined in /home/manu/Documentos/irit/learn-ocaml-editor/src/app/../editor/dune
Compiled base: /home/manu/Documentos/irit/learn-ocaml-editor/_build/default/src/app/../editor/.editor_lib.objs/byte
Found ace defined in /home/manu/Documentos/irit/learn-ocaml-editor/src/app/../ace-lib/dune
Compiled base: /home/manu/Documentos/irit/learn-ocaml-editor/_build/default/src/app/../ace-lib/.ace.objs/byte
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/uutf
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/uri
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/uchar
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/tyxml/functor
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/tyxml
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/stringext
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/sexplib/0
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/sexplib
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/seq
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/result
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/reactiveData
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/react
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/re/posix
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/re
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/ppx_tools_versioned
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/ppx_tools
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/ppx_derivers
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/omd
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/ocplib-json-typed
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/ocp-indent-nlfork/utils
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/ocp-indent-nlfork/lib
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/ocp-indent-nlfork/lexer
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/ocaml/compiler-libs
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/ocaml-migrate-parsetree
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/ocaml
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/lwt_react
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/lwt
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/jsonm
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/js_of_ocaml-tyxml
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/js_of_ocaml-ppx
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/js_of_ocaml-lwt
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/js_of_ocaml
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/ipaddr
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/hex
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/ezjsonm
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/eqaf
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/digestif/ocaml
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/cstruct
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/conduit
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/bytes
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/bigarray-compat
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/base64
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/astring
>> Collecting deps for /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/ocaml
Depedency dirs /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/uutf /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/uri /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/uchar /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/tyxml/functor /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/tyxml /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/stringext /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/sexplib/0 /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/sexplib /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/seq /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/result /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/reactiveData /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/react /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/re/posix /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/re /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/ppx_tools_versioned /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/ppx_tools /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/ppx_derivers /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/omd /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/ocplib-json-typed /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/ocp-indent-nlfork/utils /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/ocp-indent-nlfork/lib /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/ocp-indent-nlfork/lexer /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/ocaml/compiler-libs /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/ocaml-migrate-parsetree /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/ocaml /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/lwt_react /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/lwt /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/jsonm /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/js_of_ocaml-tyxml /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/js_of_ocaml-ppx /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/js_of_ocaml-lwt /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/js_of_ocaml /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/ipaddr /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/hex /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/ezjsonm /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/eqaf /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/digestif/ocaml /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/cstruct /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/conduit /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/bytes /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/bigarray-compat /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/base64 /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/astring /home/manu/.opam/ocaml-base-compiler.4.05.0/lib/ocaml
>> Build system running: opam exec -- dune build @install --root .
